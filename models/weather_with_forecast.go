// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WeatherWithForecast weather with forecast
//
// swagger:model WeatherWithForecast
type WeatherWithForecast struct {

	// cloudiness
	Cloudiness string `json:"cloudiness,omitempty"`

	// forecast
	Forecast *Forecast `json:"forecast,omitempty"`

	// geo coordinates
	GeoCoordinates string `json:"geo_coordinates,omitempty"`

	// humidity
	Humidity string `json:"humidity,omitempty"`

	// location name
	LocationName string `json:"location_name,omitempty"`

	// pressure
	Pressure string `json:"pressure,omitempty"`

	// requested time
	RequestedTime string `json:"requested_time,omitempty"`

	// sunrise
	Sunrise string `json:"sunrise,omitempty"`

	// sunset
	Sunset string `json:"sunset,omitempty"`

	// temperature
	Temperature string `json:"temperature,omitempty"`

	// wind
	Wind string `json:"wind,omitempty"`
}

// Validate validates this weather with forecast
func (m *WeatherWithForecast) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForecast(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WeatherWithForecast) validateForecast(formats strfmt.Registry) error {

	if swag.IsZero(m.Forecast) { // not required
		return nil
	}

	if m.Forecast != nil {
		if err := m.Forecast.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("forecast")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WeatherWithForecast) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WeatherWithForecast) UnmarshalBinary(b []byte) error {
	var res WeatherWithForecast
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
