// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Weather API",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/weather": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "weather"
        ],
        "summary": "Get the current weather with or without the forecast. If forecast_day parameter is present returns forecast for the given day as a part of response. Otherwise 'forecast' field in the response will be empty.",
        "operationId": "getWeather",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "The city name for which the weather is returned",
            "name": "city",
            "in": "query",
            "required": true
          },
          {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "x-nullable": false,
            "description": "Two-characters country code. i.e. 'us'",
            "name": "country",
            "in": "query",
            "required": true
          },
          {
            "maximum": 6,
            "type": "integer",
            "x-nullable": false,
            "description": "Specifies the day of the forecast (0 - today)",
            "name": "forecast_day",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WeatherWithForecast"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Forecast": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "humidity": {
          "type": "string"
        },
        "pressure": {
          "type": "string"
        },
        "sunrise": {
          "type": "string"
        },
        "sunset": {
          "type": "string"
        },
        "temperature": {
          "type": "string"
        },
        "wind": {
          "type": "string"
        },
        "wind_speed": {
          "type": "string"
        }
      }
    },
    "WeatherWithForecast": {
      "type": "object",
      "properties": {
        "cloudiness": {
          "type": "string"
        },
        "forecast": {
          "$ref": "#/definitions/Forecast"
        },
        "geo_coordinates": {
          "type": "string"
        },
        "humidity": {
          "type": "string"
        },
        "location_name": {
          "type": "string"
        },
        "pressure": {
          "type": "string"
        },
        "requested_time": {
          "type": "string"
        },
        "sunrise": {
          "type": "string"
        },
        "sunset": {
          "type": "string"
        },
        "temperature": {
          "type": "string"
        },
        "wind": {
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Weather API",
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/weather": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "weather"
        ],
        "summary": "Get the current weather with or without the forecast. If forecast_day parameter is present returns forecast for the given day as a part of response. Otherwise 'forecast' field in the response will be empty.",
        "operationId": "getWeather",
        "parameters": [
          {
            "type": "string",
            "x-nullable": false,
            "description": "The city name for which the weather is returned",
            "name": "city",
            "in": "query",
            "required": true
          },
          {
            "maxLength": 2,
            "minLength": 2,
            "type": "string",
            "x-nullable": false,
            "description": "Two-characters country code. i.e. 'us'",
            "name": "country",
            "in": "query",
            "required": true
          },
          {
            "maximum": 6,
            "minimum": 0,
            "type": "integer",
            "x-nullable": false,
            "description": "Specifies the day of the forecast (0 - today)",
            "name": "forecast_day",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WeatherWithForecast"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Forecast": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "humidity": {
          "type": "string"
        },
        "pressure": {
          "type": "string"
        },
        "sunrise": {
          "type": "string"
        },
        "sunset": {
          "type": "string"
        },
        "temperature": {
          "type": "string"
        },
        "wind": {
          "type": "string"
        },
        "wind_speed": {
          "type": "string"
        }
      }
    },
    "WeatherWithForecast": {
      "type": "object",
      "properties": {
        "cloudiness": {
          "type": "string"
        },
        "forecast": {
          "$ref": "#/definitions/Forecast"
        },
        "geo_coordinates": {
          "type": "string"
        },
        "humidity": {
          "type": "string"
        },
        "location_name": {
          "type": "string"
        },
        "pressure": {
          "type": "string"
        },
        "requested_time": {
          "type": "string"
        },
        "sunrise": {
          "type": "string"
        },
        "sunset": {
          "type": "string"
        },
        "temperature": {
          "type": "string"
        },
        "wind": {
          "type": "string"
        }
      }
    }
  }
}`))
}
