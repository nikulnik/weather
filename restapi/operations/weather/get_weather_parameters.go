// Code generated by go-swagger; DO NOT EDIT.

package weather

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetWeatherParams creates a new GetWeatherParams object
// no default values defined in spec.
func NewGetWeatherParams() GetWeatherParams {

	return GetWeatherParams{}
}

// GetWeatherParams contains all the bound params for the get weather operation
// typically these are obtained from a http.Request
//
// swagger:parameters getWeather
type GetWeatherParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The city name for which the weather is returned
	  Required: true
	  In: query
	*/
	City string
	/*Two-characters country code. i.e. 'us'
	  Required: true
	  Max Length: 2
	  Min Length: 2
	  In: query
	*/
	Country string
	/*Specifies the day of the forecast (0 - today)
	  Maximum: 6
	  Minimum: 0
	  In: query
	*/
	ForecastDay *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetWeatherParams() beforehand.
func (o *GetWeatherParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCity, qhkCity, _ := qs.GetOK("city")
	if err := o.bindCity(qCity, qhkCity, route.Formats); err != nil {
		res = append(res, err)
	}

	qCountry, qhkCountry, _ := qs.GetOK("country")
	if err := o.bindCountry(qCountry, qhkCountry, route.Formats); err != nil {
		res = append(res, err)
	}

	qForecastDay, qhkForecastDay, _ := qs.GetOK("forecast_day")
	if err := o.bindForecastDay(qForecastDay, qhkForecastDay, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCity binds and validates parameter City from query.
func (o *GetWeatherParams) bindCity(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("city", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("city", "query", raw); err != nil {
		return err
	}

	o.City = raw

	return nil
}

// bindCountry binds and validates parameter Country from query.
func (o *GetWeatherParams) bindCountry(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("country", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("country", "query", raw); err != nil {
		return err
	}

	o.Country = raw

	if err := o.validateCountry(formats); err != nil {
		return err
	}

	return nil
}

// validateCountry carries on validations for parameter Country
func (o *GetWeatherParams) validateCountry(formats strfmt.Registry) error {

	if err := validate.MinLength("country", "query", o.Country, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "query", o.Country, 2); err != nil {
		return err
	}

	return nil
}

// bindForecastDay binds and validates parameter ForecastDay from query.
func (o *GetWeatherParams) bindForecastDay(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("forecast_day", "query", "int64", raw)
	}
	o.ForecastDay = &value

	if err := o.validateForecastDay(formats); err != nil {
		return err
	}

	return nil
}

// validateForecastDay carries on validations for parameter ForecastDay
func (o *GetWeatherParams) validateForecastDay(formats strfmt.Registry) error {

	if err := validate.MinimumInt("forecast_day", "query", int64(*o.ForecastDay), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("forecast_day", "query", int64(*o.ForecastDay), 6, false); err != nil {
		return err
	}

	return nil
}
