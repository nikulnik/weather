// Code generated by go-swagger; DO NOT EDIT.

package weather

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetWeatherHandlerFunc turns a function with the right signature into a get weather handler
type GetWeatherHandlerFunc func(GetWeatherParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetWeatherHandlerFunc) Handle(params GetWeatherParams) middleware.Responder {
	return fn(params)
}

// GetWeatherHandler interface for that can handle valid get weather params
type GetWeatherHandler interface {
	Handle(GetWeatherParams) middleware.Responder
}

// NewGetWeather creates a new http.Handler for the get weather operation
func NewGetWeather(ctx *middleware.Context, handler GetWeatherHandler) *GetWeather {
	return &GetWeather{Context: ctx, Handler: handler}
}

/*GetWeather swagger:route GET /weather weather getWeather

Get the current weather with or without the forecast. If forecast_day parameter is present returns forecast for the given day as a part of response. Otherwise 'forecast' field in the response will be empty.

*/
type GetWeather struct {
	Context *middleware.Context
	Handler GetWeatherHandler
}

func (o *GetWeather) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetWeatherParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
