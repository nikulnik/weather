// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/nikulnik/weather/domain"
	mock "github.com/stretchr/testify/mock"
)

// OpenWeatherMapClient is an autogenerated mock type for the OpenWeatherMapClient type
type OpenWeatherMapClient struct {
	mock.Mock
}

// GetForecast provides a mock function with given fields: lat, lon, day
func (_m *OpenWeatherMapClient) GetForecast(lat float64, lon float64, day int64) (*domain.Forecast, error) {
	ret := _m.Called(lat, lon, day)

	var r0 *domain.Forecast
	if rf, ok := ret.Get(0).(func(float64, float64, int64) *domain.Forecast); ok {
		r0 = rf(lat, lon, day)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Forecast)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(float64, float64, int64) error); ok {
		r1 = rf(lat, lon, day)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeather provides a mock function with given fields: city, countryCode
func (_m *OpenWeatherMapClient) GetWeather(city string, countryCode string) (*domain.CurrentWeather, error) {
	ret := _m.Called(city, countryCode)

	var r0 *domain.CurrentWeather
	if rf, ok := ret.Get(0).(func(string, string) *domain.CurrentWeather); ok {
		r0 = rf(city, countryCode)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.CurrentWeather)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(city, countryCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
